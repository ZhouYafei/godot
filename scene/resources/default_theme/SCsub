Import('env')

def unzip(zip_filename):
	import zipfile
	zf = zipfile.ZipFile(zip_filename, 'r')
	filelist = zf.namelist()
	for f in filelist:
		data = zf.read(f)
		fo = open(f, 'wb')
		fo.write(data)
		fo.close()

def write_font_inc(cjk, pages=1):
	inc = 'editor_fonts.inc'
	output = ' /* AUTOGENERATED FILE, DO NOT EDIT */ \n'
	if cjk:
		
		unzip('font_normal_cjk.zip')
		output+='#include "font_normal_cjk.inc"\n'
		
		for i in range(pages):
			output+='#include "font_normal_cjk_'+str(i)+'.inc"\n'

		output+='static const bool _use_cjk_font = true;\n'
		output+='static const bool _cjk_img_data_compressed= true;\n'
		output+='static const int _builtin_normal_font_pages = '+ str(pages) +';\n'
		output+='static const unsigned char *_builtin_normal_font_img_data = 0;\n'
		output+='static const unsigned char *_builtin_normal_font_img_data_cjk['+str(pages)+']={'
		for i in range(pages):
			output+='_builtin_normal_font_img_data_'+str(i)+','		
		output+='};\n'
		output+='static const int _builtin_normal_font_img_data_cjk_count['+str(pages)+']={'
		for i in range(pages):
			output+='_builtin_normal_font_img_data_count'+str(i)+','
		output+='};\n\n'
				
		output+='static const int _builtin_source_font_height=_builtin_normal_font_height;\n'
		output+='static const int _builtin_source_font_ascent=_builtin_normal_font_ascent;\n'
		output+='static const int _builtin_source_font_charcount=_builtin_normal_font_charcount;\n'
		output+='static const int  **_builtin_source_font_charrects = 0;\n'
		output+='static const int _builtin_source_font_kerning_pair_count=_builtin_normal_font_kerning_pair_count;\n'
		output+='static const int **_builtin_source_font_kerning_pairs=0;\n'
		output+='static const int _builtin_source_font_img_width=_builtin_normal_font_img_width;\n'
		output+='static const int _builtin_source_font_img_height=_builtin_normal_font_img_height;\n'
		output+='static const unsigned char *_builtin_source_font_img_data=0;\n'
		output+='\n'
		output+='static const int _builtin_large_font_height=_builtin_normal_font_height;\n'
		output+='static const int _builtin_large_font_ascent=_builtin_normal_font_ascent;\n'
		output+='static const int _builtin_large_font_charcount=_builtin_normal_font_charcount;\n'
		output+='static const int **_builtin_large_font_charrects=0;\n'
		output+='static const int _builtin_large_font_kerning_pair_count=_builtin_normal_font_kerning_pair_count;\n'
		output+='static const int **_builtin_large_font_kerning_pairs=0;\n'
		output+='static const int _builtin_large_font_img_width=_builtin_normal_font_img_width;\n'
		output+='static const int _builtin_large_font_img_height=_builtin_normal_font_img_height;\n'
		output+='static const unsigned char *_builtin_large_font_img_data=0;\n'

	else:
		output+='#include "font_normal.inc"\n'
		output+='#include "font_source.inc"\n'
		output+='#include "font_large.inc"\n'
		output+='static const bool _use_cjk_font = false;\n'
		output+='static const bool _cjk_img_data_compressed= false;\n'
		output+='static const int _builtin_normal_font_pages=1;\n'
		output+='static const unsigned char **_builtin_normal_font_img_data_cjk=0;\n'
		output+='static const unsigned int *_builtin_normal_font_img_data_cjk_count=0;\n'
		
	f=open(inc,'wb')
	f.write(output)
	f.close()

if(env["cjk"]=="yes"):
	write_font_inc(True,6)
else:
	write_font_inc(False)

env.add_source_files(env.scene_sources,"*.cpp")

Export('env')
