<?xml version="1.0" encoding="UTF-8" ?>
<resource_file type="CanvasItemShader" subresource_count="1" version="2.2" version_name="Godot Engine v2.2.alpha.custom_build">
	<main_resource>
		<dictionary name="_code" shared="false">
			<string> "fragment" </string>
			<string> "uniform float hueAdjust = 90;&#000a;&#000a;vec4  kRGBToYPrime = vec4 (0.299, 0.587, 0.114, 0.0);&#000a;vec4  kRGBToI = vec4 (0.595716, -0.274453, -0.321263, 0.0);&#000a;vec4  kRGBToQ = vec4 (0.211456, -0.522591, 0.31135, 0.0);&#000a;vec4  kYIQToR = vec4 (1.0, 0.9563, 0.6210, 0.0);&#000a;vec4  kYIQToG = vec4 (1.0, -0.2721, -0.6474, 0.0);&#000a;vec4  kYIQToB   = vec4 (1.0, -1.1070, 1.7046, 0.0);&#000a;// Sample the input pixel&#000a;vec4 col = tex(TEXTURE, UV);&#000a;float YPrime = dot (col, kRGBToYPrime);&#000a;float I = dot (col, kRGBToI);&#000a;float Q = dot (col, kRGBToQ);&#000a;// Calculate the hue and chroma&#000a;float hue = atan2 (Q, I);&#000a;float chroma  = sqrt (I * I + Q * Q);&#000a;// Make the user&apos;s adjustments&#000a;hue += (-hueAdjust); //why negative rotation?&#000a;// Convert back to YIQ&#000a;Q = chroma * sin (hue);&#000a;I = chroma * cos (hue);&#000a;// Convert back to RGB&#000a;vec4    yIQ   = vec4 (YPrime, I, Q, 0.0);&#000a;col.r = dot (yIQ, kYIQToR);&#000a;col.g = dot (yIQ, kYIQToG);&#000a;col.b = dot (yIQ, kYIQToB);&#000a;// Save the result&#000a;COLOR = SRC_COLOR * col;&#000a;&#000a;" </string>
			<string> "fragment_ofs" </string>
			<int> 0 </int>
			<string> "light" </string>
			<string> "" </string>
			<string> "light_ofs" </string>
			<int> 0 </int>
			<string> "vertex" </string>
			<string> "" </string>
			<string> "vertex_ofs" </string>
			<int> 0 </int>
		</dictionary>

	</main_resource>
</resource_file>